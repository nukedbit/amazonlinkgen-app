{"version":3,"sources":["amazon-link-builder.png","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","findStoreRegExp","RegExp","findAsinRegExp","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getStore","url","result","exec","length","entries","next","value","getAsin","m","match","console","log","generateUrl","_","state","code","store","asin","concat","setState","link","storeCode","onCheckboxChange","ev","isChecked","rememberCode","localStorage","removeItem","showLink","react_default","a","createElement","Stack","horizontal","tokens","childrenGap","href","target","PrimaryButton","onClick","copy","_this$state","setItem","getItem","columnProps","styles","root","width","maxWidth","_this2","_this$state2","horizontalAlign","padding","src","logo","style","assign","TextField","label","onChange","e","newValue","Checkbox","checked","DefaultButton","disabled","text","React","Component","App","Main_Main","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b3dfd5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amazon-link-builder.2a3800a7.png\";","import React from \"react\";\nimport { TextField, MaskedTextField, ITextField } from 'office-ui-fabric-react/lib/TextField';\nimport { Stack, IStackProps } from 'office-ui-fabric-react/lib/Stack';\nimport { css, classNamesFunction, DefaultButton, IButtonProps, IStyle, Label, PrimaryButton, Checkbox } from 'office-ui-fabric-react';\nimport * as _ from \"lodash\";\nimport { copyFile } from \"fs\";\nimport logo from './amazon-link-builder.png';\nimport copy from \"clipboard-copy\";\n\nexport interface IMainProps {\n\n}\n\nlet findStoreRegExp = new RegExp(\"(https:\\/\\/.*amazon\\.[^/]*)\");\nlet findAsinRegExp = new RegExp(\"(?:[/dp/]|$)([A-Z0-9]{10})\");\n\nexport default class Main extends React.Component<IMainProps, any> {\n\n    constructor(props: IMainProps) {\n        super(props);\n        const columnProps: Partial<IStackProps> = {\n            tokens: { childrenGap: 15 },\n            styles: { root: { width: \"100%\", maxWidth:\"500px\" } }\n        };\n        let code = localStorage.getItem(\"code\");\n        this.state = {\n            columnProps,\n            rememberCode : _.isEmpty(code) ? false : true,\n            code: code,\n            link:null\n        }\n    }\n\n    getStore = (url: string) => {\n        let result = findStoreRegExp.exec(url);\n        if (result === null || result.length === 0) {\n            return null;\n        }\n\n        let entries = result.entries();\n\n        return entries.next().value[1];\n    };\n\n    getAsin = (url: string) => {\n        let m = url.match(findAsinRegExp)\n        console.log(\"match\", m);\n        if(m){\n            return m[1];\n        }\n        return null;\n    };\n\n    generateUrl = () => {\n        if(!_.isEmpty(this.state.url) && !_.isEmpty(this.state.code)) {\n            let store = this.getStore(this.state.url!);\n            let asin = this.getAsin(this.state.url);\n            if(!_.isEmpty(store) && !_.isEmpty(asin)){\n                let url = `${store}/dp/product/${asin}?tag=${this.state.code}`;\n                this.setState({link:url});\n            }\n        }\n        this.storeCode();\n    };\n\n\n    onCheckboxChange = (ev:any, isChecked?: boolean) : void => {\n        if(isChecked === null) {\n            return;\n        }\n        this.setState({rememberCode: isChecked!}, () => {\n            if(isChecked! === false){\n                localStorage.removeItem(\"code\");\n            }\n            this.storeCode();\n        });\n    };\n\n    showLink = () => {\n        let { link } = this.state;\n        if(_.isEmpty(link)){\n            return null;\n        }\n        return (\n            <Stack horizontal tokens={{ childrenGap: 50 }} >\n                <a href={link} target=\"_blank\" >{link}</a>\n                <PrimaryButton onClick={() => {\n                    let { link } = this.state;\n                    copy(link);\n                }}>Copy</PrimaryButton>\n            </Stack>\n        )\n    }\n\n    storeCode = () => {\n        let {code, rememberCode} = this.state;\n        if(rememberCode){\n            localStorage.setItem(\"code\", code);\n        }\n    }\n\n    render(): React.ReactElement<IMainProps> {\n        let {columnProps, url, code, rememberCode} = this.state;\n        return (<Stack horizontalAlign=\"center\" tokens={{ childrenGap: 20 }} styles={{ root: { width: \"100%\", padding: \"2rem\" } }}>\n            <Stack horizontalAlign=\"center\" tokens={{ childrenGap: 20 }}>\n                <img src={logo} style={{width:\"100px\"}}></img>\n                <h1>Amazon Affiliate link builder</h1>\n            </Stack>\n            <Stack horizontalAlign=\"stretch\"  {...columnProps} >\n                \n                <TextField styles={{ root: { width: '100%'} }} label=\"Amazon URL\" onChange={(e, newValue?: string) => this.setState({url: newValue })} />\n                <TextField label=\"Tracking Id\" value={code} onChange={(e, newValue?: string) => {\n                    this.setState({code: newValue }, () => {\n                        this.storeCode();\n                    });\n                }} />\n            </Stack>\n            <Stack  horizontalAlign=\"center\" {...columnProps}>\n                <Checkbox checked={rememberCode} label=\"Remember affiliate code (in the browser no data is sent anywhere)\" onChange={this.onCheckboxChange} />\n                <DefaultButton\n                    disabled={_.isEmpty(url) || _.isEmpty(code)}\n                    text=\"Generate\"\n                    onClick={this.generateUrl}\n                />\n                {this.showLink()}\n            </Stack>\n            <Stack horizontal   horizontalAlign=\"center\" >\n                <a href=\"https://www.nukedbit.it\">Built by NukedBit</a> &nbsp;- &nbsp;<a href=\"https://github.com/nukedbit/amazonlinkgen-app\">Get Source Code</a>\n            </Stack>\n        </Stack>);\n    }\n\n}","import React from 'react';\n\nimport Main from './Main';\n\n\nconst App: React.FC = () => {\n  return (\n    <Main></Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}